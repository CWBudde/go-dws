// Test file for static array inline type syntax in function parameters
// Task 9.54: Static array bounds support in inline type expressions

program StaticArraysInParams;

// Test 1: Procedures with static array parameters
procedure PrintArray(arr: array[1..10] of Integer);
begin
  var i: Integer;
  for i := 1 to 10 do
    Print(arr[i]);
  PrintLn('');
end;

procedure FillArray(var arr: array[1..10] of Integer; value: Integer);
begin
  var i: Integer;
  for i := 1 to 10 do
    arr[i] := value;
end;

// Test 2: Functions with static array parameters
function SumArray(arr: array[1..5] of Integer): Integer;
begin
  var sum: Integer := 0;
  var i: Integer;
  for i := 1 to 5 do
    sum := sum + arr[i];
  Result := sum;
end;

function FindMax(arr: array[1..10] of Float): Float;
begin
  var max: Float := arr[1];
  var i: Integer;
  for i := 2 to 10 do
    if arr[i] > max then
      max := arr[i];
  Result := max;
end;

// Test 3: Functions returning static arrays (when supported)
// function CreateArray(): array[1..10] of Integer;
// begin
//   var arr: array[1..10] of Integer;
//   var i: Integer;
//   for i := 1 to 10 do
//     arr[i] := i * i;
//   Result := arr;
// end;

// Test 4: Zero-based array parameters
procedure ProcessBytes(data: array[0..255] of Integer);
begin
  var i: Integer;
  for i := 0 to 255 do
    data[i] := data[i] + 1;
end;

// Test 5: Negative bounds in parameters
function SumCentered(arr: array[-5..5] of Integer): Integer;
begin
  var sum: Integer := 0;
  var i: Integer;
  for i := -5 to 5 do
    sum := sum + arr[i];
  Result := sum;
end;

// Test 6: Nested static array parameters (matrices)
procedure InitMatrix(var matrix: array[1..3] of array[1..3] of Integer);
begin
  var i, j: Integer;
  for i := 1 to 3 do
    for j := 1 to 3 do
      matrix[i][j] := i * 10 + j;
end;

function MatrixSum(matrix: array[1..3] of array[1..3] of Integer): Integer;
begin
  var sum: Integer := 0;
  var i, j: Integer;
  for i := 1 to 3 do
    for j := 1 to 3 do
      sum := sum + matrix[i][j];
  Result := sum;
end;

// Test 7: Mixed static and dynamic array parameters
procedure ProcessMixed(fixed: array[1..10] of Integer; dynamic: array of String);
begin
  var i: Integer;
  for i := 1 to 10 do
    Print(fixed[i]);

  for i := 0 to Length(dynamic) - 1 do
    PrintLn(dynamic[i]);
end;

// Test 8: Multiple static array parameters
function CompareArrays(a: array[1..10] of Integer; b: array[1..10] of Integer): Boolean;
begin
  var i: Integer;
  for i := 1 to 10 do
    if a[i] <> b[i] then begin
      Result := false;
      Exit;
    end;
  Result := true;
end;

// Test 9: Different types in parameters
procedure HandleStrings(names: array[1..5] of String);
begin
  var i: Integer;
  for i := 1 to 5 do
    PrintLn('Name ' + IntToStr(i) + ': ' + names[i]);
end;

procedure ToggleFlags(var flags: array[1..10] of Boolean);
begin
  var i: Integer;
  for i := 1 to 10 do
    flags[i] := not flags[i];
end;

// Test 10: Higher-order functions - passing array processing functions
type
  TArrayProcessor = function(arr: array[1..5] of Integer): Integer;

function ApplyProcessor(arr: array[1..5] of Integer; processor: TArrayProcessor): Integer;
begin
  Result := processor(arr);
end;

function AverageArray(arr: array[1..5] of Integer): Integer;
begin
  var sum: Integer := 0;
  var i: Integer;
  for i := 1 to 5 do
    sum := sum + arr[i];
  Result := sum div 5;
end;

function MultiplyArray(arr: array[1..5] of Integer): Integer;
begin
  var product: Integer := 1;
  var i: Integer;
  for i := 1 to 5 do
    product := product * arr[i];
  Result := product;
end;

// Test 11: Array manipulation utilities with inline types
procedure ReverseArray(var arr: array[1..10] of Integer);
begin
  var i: Integer;
  var temp: Integer;
  for i := 1 to 5 do begin
    temp := arr[i];
    arr[i] := arr[11 - i];
    arr[11 - i] := temp;
  end;
end;

procedure SortArray(var arr: array[1..10] of Integer);
begin
  var i, j, temp: Integer;
  for i := 1 to 9 do
    for j := i + 1 to 10 do
      if arr[i] > arr[j] then begin
        temp := arr[i];
        arr[i] := arr[j];
        arr[j] := temp;
      end;
end;

function BinarySearch(arr: array[1..10] of Integer; value: Integer): Integer;
begin
  var left, right, mid: Integer;
  left := 1;
  right := 10;

  while left <= right do begin
    mid := (left + right) div 2;
    if arr[mid] = value then begin
      Result := mid;
      Exit;
    end
    else if arr[mid] < value then
      left := mid + 1
    else
      right := mid - 1;
  end;

  Result := -1; // Not found
end;

begin
  // Test static array parameter passing
  var numbers: array[1..10] of Integer;
  var small: array[1..5] of Integer;
  var centered: array[-5..5] of Integer;

  // Initialize arrays
  FillArray(numbers, 42);
  PrintArray(numbers);

  // Test function with static array
  small[1] := 10;
  small[2] := 20;
  small[3] := 30;
  small[4] := 40;
  small[5] := 50;
  var sum: Integer := SumArray(small);
  PrintLn('Sum: ' + IntToStr(sum));

  // Test negative bounds
  centered[-5] := 1;
  centered[0] := 5;
  centered[5] := 10;
  var centeredSum: Integer := SumCentered(centered);
  PrintLn('Centered sum: ' + IntToStr(centeredSum));

  // Test matrix parameters
  var matrix: array[1..3] of array[1..3] of Integer;
  InitMatrix(matrix);
  var matrixSum: Integer := MatrixSum(matrix);
  PrintLn('Matrix sum: ' + IntToStr(matrixSum));

  // Test higher-order functions with array parameters
  var testArr: array[1..5] of Integer;
  testArr[1] := 2;
  testArr[2] := 4;
  testArr[3] := 6;
  testArr[4] := 8;
  testArr[5] := 10;

  var avg: Integer := ApplyProcessor(testArr, AverageArray);
  PrintLn('Average via processor: ' + IntToStr(avg));

  var product: Integer := ApplyProcessor(testArr, MultiplyArray);
  PrintLn('Product via processor: ' + IntToStr(product));

  // Test array manipulation utilities
  var unsorted: array[1..10] of Integer;
  unsorted[1] := 64;
  unsorted[2] := 34;
  unsorted[3] := 25;
  unsorted[4] := 12;
  unsorted[5] := 22;
  unsorted[6] := 11;
  unsorted[7] := 90;
  unsorted[8] := 88;
  unsorted[9] := 45;
  unsorted[10] := 50;

  PrintLn('Before sort: 64, 34, 25, ...');
  SortArray(unsorted);
  PrintLn('After sort: ' + IntToStr(unsorted[1]) + ', ' + IntToStr(unsorted[2]) + ', ' + IntToStr(unsorted[3]) + ', ...');

  var searchResult: Integer := BinarySearch(unsorted, 22);
  PrintLn('Binary search for 22: index ' + IntToStr(searchResult));

  var toReverse: array[1..10] of Integer;
  var k: Integer;
  for k := 1 to 10 do
    toReverse[k] := k;

  PrintLn('Before reverse: 1, 2, 3, ..., 10');
  ReverseArray(toReverse);
  PrintLn('After reverse: ' + IntToStr(toReverse[1]) + ', ' + IntToStr(toReverse[2]) + ', ..., ' + IntToStr(toReverse[10]));

  PrintLn('Static array parameter tests completed successfully!');
end.
